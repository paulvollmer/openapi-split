package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"strings"
)

var (
	indexFile      string
	definitionsDir string
	pathsDir       string
	responsesDir   string
)

func usage() {
	fmt.Print("Usage: openapi-split [flags]\n\n")
	fmt.Print("Flags:\n")
	flag.PrintDefaults()
	fmt.Println("\nTHIS IS A ALPHA RELEASE. KEEP IN MIND THAT IN FUTURE MAJOR CHANGES CAN BE OCCURE.")
	fmt.Println("PLEASE REPORT ISSUES AT THE GITHUB REPOSITORY")
}

func init() {
	flag.StringVar(&indexFile, "i", "index.yaml", "path to the main spec file")
	flag.StringVar(&definitionsDir, "d", "./definitions", "filepath to the definitions yaml files")
	flag.StringVar(&pathsDir, "p", "./paths", "filepath to the paths yaml files")
	flag.StringVar(&responsesDir, "r", "./responses", "filepath to the responses yaml files")
	flag.Usage = usage
	flag.Parse()
}

func main() {
	indexData, err := ioutil.ReadFile(indexFile)
	if err != nil {
		panic(err)
	}

	responsesFiles, err := GetYamlFilenames(responsesDir)
	if err != nil {
		panic(err)
	}
	responsesData, err := concatYamlFiles(responsesFiles)
	if err != nil {
		panic(err)
	}

	pathsFiles, err := GetYamlFilenames(pathsDir)
	if err != nil {
		panic(err)
	}
	pathsData, err := concatYamlFiles(pathsFiles)
	if err != nil {
		panic(err)
	}

	definitionsFiles, err := GetYamlFilenames(definitionsDir)
	if err != nil {
		panic(err)
	}
	definitionsData, err := concatYamlFiles(definitionsFiles)
	if err != nil {
		panic(err)
	}

	// print out the specification
	fmt.Printf("# Generated by openapi-split\n\n")
	fmt.Printf("%s\n", indexData)
	fmt.Printf("responses:\n%s\n", strings.Join(responsesData, "\n"))
	fmt.Printf("paths:\n%s\n", strings.Join(pathsData, "\n"))
	fmt.Printf("definitions:\n%s\n", strings.Join(definitionsData, "\n"))
}
