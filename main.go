package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
)

const (
	version = "0.1.0"
	repoURL = "https://github.com/paulvollmer/openapi-split"
)

var (
	indexFile      string
	definitionsDir string
	pathsDir       string
	responsesDir   string
)

func usage() {
	fmt.Print("Usage: openapi-split [flags]\n\n")
	fmt.Print("Flags:\n")
	flag.PrintDefaults()
	fmt.Println("\nTHIS IS AN ALPHA RELEASE. KEEP IN MIND THERE CAN BE MAJOR CHANGES IN FUTURE")
	fmt.Println("PLEASE REPORT ISSUES AT THE GITHUB REPOSITORY")
	fmt.Println(repoURL + "/issues")
}

func main() {
	flag.StringVar(&indexFile, "i", "index.yaml", "path to the main openapi specification file")
	flag.StringVar(&definitionsDir, "d", "./definitions", "filepath to the definitions yaml files")
	flag.StringVar(&pathsDir, "p", "./paths", "filepath to the paths yaml files")
	flag.StringVar(&responsesDir, "r", "./responses", "filepath to the responses yaml files")
	flagVersion := flag.Bool("version", false, "print out the version and exit")
	flag.Usage = usage
	flag.Parse()
	if *flagVersion {
		fmt.Println(version)
		os.Exit(0)
	}

	indexData, err := ioutil.ReadFile(indexFile)
	if err != nil {
		fmt.Println(err)
		fmt.Println("please check if the -i flag point to the correct specification yaml file.")
		os.Exit(1)
	}

	responsesData := concatYamlFilesFromDir(responsesDir)
	pathsData := concatYamlFilesFromDir(pathsDir)
	definitionsData := concatYamlFilesFromDir(definitionsDir)

	// print out the specification
	fmt.Printf("# Generated by openapi-split v%s\n\n", version)
	fmt.Printf("%s\n", indexData)
	if len(responsesData) != 0 {
		fmt.Printf("responses:\n%s\n", strings.Join(responsesData, "\n"))
	}
	if len(pathsData) != 0 {
		fmt.Printf("paths:\n%s\n", strings.Join(pathsData, "\n"))
	}
	if len(definitionsData) != 0 {
		fmt.Printf("definitions:\n%s\n", strings.Join(definitionsData, "\n"))
	}
}
